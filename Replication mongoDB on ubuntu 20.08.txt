Replication mongoDB on ubuntu 20.08





Step 1 : Launch EC2 instances (my youtube video for launching EC2 instance - https://www.youtube.com/watch?v=z2l32IztRbM )
	One instance each for replica set member node
	An instance for mongos process which will connect our client ( MongoDB compass to our sharded MongoDB cluster)
	
Step 2 : Configure security group to all the inbound traffic/connection on the mongodb server port

Step 3 : Install MongoDB (on all AWS EC2 Ubuntu instances) ( My youtube video for installing MongoDB on Ubuntu - https://www.youtube.com/watch?v=Ecs_xUrr5YA )
	MongoDB installtion on linux ubuntu https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

	Import the public key used by the package management system.
		wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -

	Create a list file for MongoDB
		echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list

	Reload local package database
		sudo apt-get update
		
	Install the MongoDB packages
		sudo apt-get install -y mongodb-org
		
		Start MongoDB
			sudo systemctl start mongod

		Verify that MongoDB has started successfully.
			sudo systemctl status mongod
		
		You can optionally ensure that MongoDB will start following a system reboot by issuing the following command:
			sudo systemctl enable mongod
		
		Stop MongoDB
			sudo systemctl stop mongod
		
		Restart MongoDB.
			sudo systemctl restart mongod
			
		Begin using MongoDB
			mongosh 
			
	Uninstall MongoDB Community Edition
		Stop MongoDB	
			sudo service mongod stop
		
		Remove Packages
			sudo apt-get purge mongodb-org*
		
		Remove Data Directories
			sudo rm -r /var/log/mongodb
			sudo rm -r /var/lib/mongodb
			
Replication setup (Ubuntu AWS EC2 instance):
	
	ps -aef | grep mongo 
	
	create directories on all the EC2 instances
		mkdir -p replicaset/member

	Start mongoDB with the following command on every EC2 instance
		nohup mongod --port 28041 --bind_ip localhost,ec2-44-201-247-219.compute-1.amazonaws.com --replSet replica_demo --dbpath replicaset/member &
		
		nohup mongod --port 28042 --bind_ip localhost,ec2-3-80-194-115.compute-1.amazonaws.com --replSet replica_demo --dbpath replicaset/member &
		 
		nohup mongod --port 28043 --bind_ip localhost,ec2-54-164-104-230.compute-1.amazonaws.com --replSet replica_demo --dbpath replicaset/member &
		
		mongosh --host 54.164.104.230  --port 28043
		
		rsconf = {
				  _id: "replica_demo",
				  members: [
					{
					 _id: 0,
					 host: "44.201.247.219:28041"
					},
					{
					 _id: 1,
					 host: "3.80.194.115:28042"
					},
					{
					 _id: 2,
					 host: "54.164.104.230:28043"
					}
				   ]
				}
		
		rs.initiate(rsconf)
		rs.status()		
		rs.conf()
		
		Add an arbiter
			Create a new EC2 instance. This can be setup over application server or some other server as well. 
			mkdir -p replicaset/member
			nohup mongod --port 27017 --bind_ip localhost,ec2-44-202-164-113.compute-1.amazonaws.com --replSet replica_demo --dbpath replicaset/member &
			
			rs.addArb("ec2-44-202-164-113.compute-1.amazonaws.com:27017")
			rs.remove("ec2-44-202-164-113.compute-1.amazonaws.com:27017")	
				OR
			rs.addArb("44.202.164.113:27017")
			rs.remove("44.202.164.113:27017")
			
			MongoServerError: Reconfig attempted to install a config that would change the implicit default write concern. Use the setDefaultRWConcern command to set a cluster-wide write concern and try the reconfig again.
			
			db.adminCommand({
			  setDefaultRWConcern: 1,
			  defaultWriteConcern: { w: 2 }
			})

		
		Add a new replica set member :  44.202.164.113
			rs.add( { host: "ec2-44-202-164-113.compute-1.amazonaws.com:27017" } )
			rs.remove("ec2-44-202-164-113.compute-1.amazonaws.com:27017")

		
		To rename the host name:
		cfg = rs.conf()
		cfg.members[0].host = "localhost,ec2-54-187-25-38.us-west-2.compute.amazonaws.com:28041"		
		rs.reconfig(cfg)